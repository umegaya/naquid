// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/AndroidNetworkLibrary

#ifndef org_chromium_net_AndroidNetworkLibrary_JNI
#define org_chromium_net_AndroidNetworkLibrary_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_net_AndroidNetworkLibrary[];
const char kClassPath_org_chromium_net_AndroidNetworkLibrary[] =
    "org/chromium/net/AndroidNetworkLibrary";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_clazz = 0;
#ifndef org_chromium_net_AndroidNetworkLibrary_clazz_defined
#define org_chromium_net_AndroidNetworkLibrary_clazz_defined
inline jclass org_chromium_net_AndroidNetworkLibrary_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_net_AndroidNetworkLibrary,
      &g_org_chromium_net_AndroidNetworkLibrary_clazz);
}
#endif

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_storeKeyPair = 0;
static jboolean Java_AndroidNetworkLibrary_storeKeyPair(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& publicKey,
    const base::android::JavaRef<jbyteArray>& privateKey) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "storeKeyPair",
"("
"[B"
"[B"
")"
"Z",
      &g_org_chromium_net_AndroidNetworkLibrary_storeKeyPair);

  jboolean ret =
env->CallStaticBooleanMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id, publicKey.obj(), privateKey.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_getMimeTypeFromExtension = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_AndroidNetworkLibrary_getMimeTypeFromExtension(JNIEnv* env, const
    base::android::JavaRef<jstring>& extension) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "getMimeTypeFromExtension",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_org_chromium_net_AndroidNetworkLibrary_getMimeTypeFromExtension);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id, extension.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_haveOnlyLoopbackAddresses = 0;
static jboolean Java_AndroidNetworkLibrary_haveOnlyLoopbackAddresses(JNIEnv*
    env) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "haveOnlyLoopbackAddresses",
"("
")"
"Z",
      &g_org_chromium_net_AndroidNetworkLibrary_haveOnlyLoopbackAddresses);

  jboolean ret =
env->CallStaticBooleanMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_verifyServerCertificates = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_AndroidNetworkLibrary_verifyServerCertificates(JNIEnv* env, const
    base::android::JavaRef<jobjectArray>& certChain,
    const base::android::JavaRef<jstring>& authType,
    const base::android::JavaRef<jstring>& host) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "verifyServerCertificates",
"("
"[[B"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lorg/chromium/net/AndroidCertVerifyResult;",
      &g_org_chromium_net_AndroidNetworkLibrary_verifyServerCertificates);

  jobject ret =
env->CallStaticObjectMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id, certChain.obj(), authType.obj(), host.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_addTestRootCertificate = 0;
static void Java_AndroidNetworkLibrary_addTestRootCertificate(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& rootCert) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "addTestRootCertificate",
"("
"[B"
")"
"V",
      &g_org_chromium_net_AndroidNetworkLibrary_addTestRootCertificate);

env->CallStaticVoidMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id, rootCert.obj());
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_clearTestRootCertificates = 0;
static void Java_AndroidNetworkLibrary_clearTestRootCertificates(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "clearTestRootCertificates",
"("
")"
"V",
      &g_org_chromium_net_AndroidNetworkLibrary_clearTestRootCertificates);

env->CallStaticVoidMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id);
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_getNetworkCountryIso = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_AndroidNetworkLibrary_getNetworkCountryIso(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "getNetworkCountryIso",
"("
")"
"Ljava/lang/String;",
      &g_org_chromium_net_AndroidNetworkLibrary_getNetworkCountryIso);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_getNetworkOperator = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_AndroidNetworkLibrary_getNetworkOperator(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "getNetworkOperator",
"("
")"
"Ljava/lang/String;",
      &g_org_chromium_net_AndroidNetworkLibrary_getNetworkOperator);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_getSimOperator = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_AndroidNetworkLibrary_getSimOperator(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "getSimOperator",
"("
")"
"Ljava/lang/String;",
      &g_org_chromium_net_AndroidNetworkLibrary_getSimOperator);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_getIsRoaming = 0;
static jboolean Java_AndroidNetworkLibrary_getIsRoaming(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "getIsRoaming",
"("
")"
"Z",
      &g_org_chromium_net_AndroidNetworkLibrary_getIsRoaming);

  jboolean ret =
env->CallStaticBooleanMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_getIsCaptivePortal = 0;
static jboolean Java_AndroidNetworkLibrary_getIsCaptivePortal(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "getIsCaptivePortal",
"("
")"
"Z",
      &g_org_chromium_net_AndroidNetworkLibrary_getIsCaptivePortal);

  jboolean ret =
env->CallStaticBooleanMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_getWifiSSID = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_AndroidNetworkLibrary_getWifiSSID(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "getWifiSSID",
"("
")"
"Ljava/lang/String;",
      &g_org_chromium_net_AndroidNetworkLibrary_getWifiSSID);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_isCleartextPermitted = 0;
static jboolean Java_AndroidNetworkLibrary_isCleartextPermitted(JNIEnv* env,
    const base::android::JavaRef<jstring>& host) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "isCleartextPermitted",
"("
"Ljava/lang/String;"
")"
"Z",
      &g_org_chromium_net_AndroidNetworkLibrary_isCleartextPermitted);

  jboolean ret =
env->CallStaticBooleanMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id, host.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_chromium_net_AndroidNetworkLibrary_getDnsServers = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_AndroidNetworkLibrary_getDnsServers(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      org_chromium_net_AndroidNetworkLibrary_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_AndroidNetworkLibrary_clazz(env),
      "getDnsServers",
"("
")"
"[[B",
      &g_org_chromium_net_AndroidNetworkLibrary_getDnsServers);

  jobjectArray ret =
static_cast<jobjectArray>(env->CallStaticObjectMethod(org_chromium_net_AndroidNetworkLibrary_clazz(env),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

#endif  // org_chromium_net_AndroidNetworkLibrary_JNI

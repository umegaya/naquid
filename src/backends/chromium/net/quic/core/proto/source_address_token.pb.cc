// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source_address_token.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "source_address_token.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace net {
class SourceAddressTokenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SourceAddressToken> {
} _SourceAddressToken_default_instance_;
class SourceAddressTokensDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SourceAddressTokens> {
} _SourceAddressTokens_default_instance_;

namespace protobuf_source_5faddress_5ftoken_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SourceAddressToken_default_instance_.Shutdown();
  _SourceAddressTokens_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::net::protobuf_cached_5fnetwork_5fparameters_2eproto::InitDefaults();
  _SourceAddressToken_default_instance_.DefaultConstruct();
  _SourceAddressTokens_default_instance_.DefaultConstruct();
  _SourceAddressToken_default_instance_.get_mutable()->cached_network_parameters_ = const_cast< ::net::CachedNetworkParameters*>(
      ::net::CachedNetworkParameters::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::net::protobuf_cached_5fnetwork_5fparameters_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_source_5faddress_5ftoken_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceAddressToken::kIpFieldNumber;
const int SourceAddressToken::kTimestampFieldNumber;
const int SourceAddressToken::kCachedNetworkParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceAddressToken::SourceAddressToken()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_source_5faddress_5ftoken_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.SourceAddressToken)
}
SourceAddressToken::SourceAddressToken(const SourceAddressToken& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.has_cached_network_parameters()) {
    cached_network_parameters_ = new ::net::CachedNetworkParameters(*from.cached_network_parameters_);
  } else {
    cached_network_parameters_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:net.SourceAddressToken)
}

void SourceAddressToken::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cached_network_parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&cached_network_parameters_)) + sizeof(timestamp_));
}

SourceAddressToken::~SourceAddressToken() {
  // @@protoc_insertion_point(destructor:net.SourceAddressToken)
  SharedDtor();
}

void SourceAddressToken::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete cached_network_parameters_;
  }
}

void SourceAddressToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SourceAddressToken& SourceAddressToken::default_instance() {
  protobuf_source_5faddress_5ftoken_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceAddressToken* SourceAddressToken::New(::google::protobuf::Arena* arena) const {
  SourceAddressToken* n = new SourceAddressToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceAddressToken::Clear() {
// @@protoc_insertion_point(message_clear_start:net.SourceAddressToken)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ip()) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_cached_network_parameters()) {
      GOOGLE_DCHECK(cached_network_parameters_ != NULL);
      cached_network_parameters_->::net::CachedNetworkParameters::Clear();
    }
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceAddressToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net.SourceAddressToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .net.CachedNetworkParameters cached_network_parameters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cached_network_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net.SourceAddressToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net.SourceAddressToken)
  return false;
#undef DO_
}

void SourceAddressToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net.SourceAddressToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional .net.CachedNetworkParameters cached_network_parameters = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->cached_network_parameters_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net.SourceAddressToken)
}

size_t SourceAddressToken::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:net.SourceAddressToken)
  size_t total_size = 0;

  if (has_ip()) {
    // required bytes ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  return total_size;
}
size_t SourceAddressToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.SourceAddressToken)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());

    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .net.CachedNetworkParameters cached_network_parameters = 3;
  if (has_cached_network_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cached_network_parameters_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceAddressToken::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SourceAddressToken*>(&from));
}

void SourceAddressToken::MergeFrom(const SourceAddressToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.SourceAddressToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cached_network_parameters()->::net::CachedNetworkParameters::MergeFrom(from.cached_network_parameters());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceAddressToken::CopyFrom(const SourceAddressToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.SourceAddressToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceAddressToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void SourceAddressToken::Swap(SourceAddressToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceAddressToken::InternalSwap(SourceAddressToken* other) {
  ip_.Swap(&other->ip_);
  std::swap(cached_network_parameters_, other->cached_network_parameters_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SourceAddressToken::GetTypeName() const {
  return "net.SourceAddressToken";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceAddressToken

// required bytes ip = 1;
bool SourceAddressToken::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceAddressToken::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceAddressToken::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceAddressToken::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& SourceAddressToken::ip() const {
  // @@protoc_insertion_point(field_get:net.SourceAddressToken.ip)
  return ip_.GetNoArena();
}
void SourceAddressToken::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net.SourceAddressToken.ip)
}
#if LANG_CXX11
void SourceAddressToken::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.SourceAddressToken.ip)
}
#endif
void SourceAddressToken::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.SourceAddressToken.ip)
}
void SourceAddressToken::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.SourceAddressToken.ip)
}
::std::string* SourceAddressToken::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:net.SourceAddressToken.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SourceAddressToken::release_ip() {
  // @@protoc_insertion_point(field_release:net.SourceAddressToken.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceAddressToken::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:net.SourceAddressToken.ip)
}

// required int64 timestamp = 2;
bool SourceAddressToken::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceAddressToken::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceAddressToken::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceAddressToken::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 SourceAddressToken::timestamp() const {
  // @@protoc_insertion_point(field_get:net.SourceAddressToken.timestamp)
  return timestamp_;
}
void SourceAddressToken::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:net.SourceAddressToken.timestamp)
}

// optional .net.CachedNetworkParameters cached_network_parameters = 3;
bool SourceAddressToken::has_cached_network_parameters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceAddressToken::set_has_cached_network_parameters() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceAddressToken::clear_has_cached_network_parameters() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceAddressToken::clear_cached_network_parameters() {
  if (cached_network_parameters_ != NULL) cached_network_parameters_->::net::CachedNetworkParameters::Clear();
  clear_has_cached_network_parameters();
}
const ::net::CachedNetworkParameters& SourceAddressToken::cached_network_parameters() const {
  // @@protoc_insertion_point(field_get:net.SourceAddressToken.cached_network_parameters)
  return cached_network_parameters_ != NULL ? *cached_network_parameters_
                         : *::net::CachedNetworkParameters::internal_default_instance();
}
::net::CachedNetworkParameters* SourceAddressToken::mutable_cached_network_parameters() {
  set_has_cached_network_parameters();
  if (cached_network_parameters_ == NULL) {
    cached_network_parameters_ = new ::net::CachedNetworkParameters;
  }
  // @@protoc_insertion_point(field_mutable:net.SourceAddressToken.cached_network_parameters)
  return cached_network_parameters_;
}
::net::CachedNetworkParameters* SourceAddressToken::release_cached_network_parameters() {
  // @@protoc_insertion_point(field_release:net.SourceAddressToken.cached_network_parameters)
  clear_has_cached_network_parameters();
  ::net::CachedNetworkParameters* temp = cached_network_parameters_;
  cached_network_parameters_ = NULL;
  return temp;
}
void SourceAddressToken::set_allocated_cached_network_parameters(::net::CachedNetworkParameters* cached_network_parameters) {
  delete cached_network_parameters_;
  cached_network_parameters_ = cached_network_parameters;
  if (cached_network_parameters) {
    set_has_cached_network_parameters();
  } else {
    clear_has_cached_network_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:net.SourceAddressToken.cached_network_parameters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceAddressTokens::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceAddressTokens::SourceAddressTokens()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_source_5faddress_5ftoken_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.SourceAddressTokens)
}
SourceAddressTokens::SourceAddressTokens(const SourceAddressTokens& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:net.SourceAddressTokens)
}

void SourceAddressTokens::SharedCtor() {
  _cached_size_ = 0;
}

SourceAddressTokens::~SourceAddressTokens() {
  // @@protoc_insertion_point(destructor:net.SourceAddressTokens)
  SharedDtor();
}

void SourceAddressTokens::SharedDtor() {
}

void SourceAddressTokens::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SourceAddressTokens& SourceAddressTokens::default_instance() {
  protobuf_source_5faddress_5ftoken_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceAddressTokens* SourceAddressTokens::New(::google::protobuf::Arena* arena) const {
  SourceAddressTokens* n = new SourceAddressTokens;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceAddressTokens::Clear() {
// @@protoc_insertion_point(message_clear_start:net.SourceAddressTokens)
  tokens_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceAddressTokens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net.SourceAddressTokens)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.SourceAddressToken tokens = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net.SourceAddressTokens)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net.SourceAddressTokens)
  return false;
#undef DO_
}

void SourceAddressTokens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net.SourceAddressTokens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.SourceAddressToken tokens = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->tokens(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net.SourceAddressTokens)
}

size_t SourceAddressTokens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.SourceAddressTokens)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .net.SourceAddressToken tokens = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tokens(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceAddressTokens::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SourceAddressTokens*>(&from));
}

void SourceAddressTokens::MergeFrom(const SourceAddressTokens& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.SourceAddressTokens)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
}

void SourceAddressTokens::CopyFrom(const SourceAddressTokens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.SourceAddressTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceAddressTokens::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->tokens())) return false;
  return true;
}

void SourceAddressTokens::Swap(SourceAddressTokens* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceAddressTokens::InternalSwap(SourceAddressTokens* other) {
  tokens_.InternalSwap(&other->tokens_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SourceAddressTokens::GetTypeName() const {
  return "net.SourceAddressTokens";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceAddressTokens

// repeated .net.SourceAddressToken tokens = 4;
int SourceAddressTokens::tokens_size() const {
  return tokens_.size();
}
void SourceAddressTokens::clear_tokens() {
  tokens_.Clear();
}
const ::net::SourceAddressToken& SourceAddressTokens::tokens(int index) const {
  // @@protoc_insertion_point(field_get:net.SourceAddressTokens.tokens)
  return tokens_.Get(index);
}
::net::SourceAddressToken* SourceAddressTokens::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:net.SourceAddressTokens.tokens)
  return tokens_.Mutable(index);
}
::net::SourceAddressToken* SourceAddressTokens::add_tokens() {
  // @@protoc_insertion_point(field_add:net.SourceAddressTokens.tokens)
  return tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::net::SourceAddressToken >*
SourceAddressTokens::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:net.SourceAddressTokens.tokens)
  return &tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::net::SourceAddressToken >&
SourceAddressTokens::tokens() const {
  // @@protoc_insertion_point(field_list:net.SourceAddressTokens.tokens)
  return tokens_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cached_network_parameters.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cached_network_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace net {
class CachedNetworkParametersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CachedNetworkParameters> {
} _CachedNetworkParameters_default_instance_;

namespace protobuf_cached_5fnetwork_5fparameters_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _CachedNetworkParameters_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CachedNetworkParameters_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_cached_5fnetwork_5fparameters_2eproto

bool CachedNetworkParameters_PreviousConnectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters::SLOW_START;
const CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters::CONGESTION_AVOIDANCE;
const CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters::PreviousConnectionState_MIN;
const CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters::PreviousConnectionState_MAX;
const int CachedNetworkParameters::PreviousConnectionState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CachedNetworkParameters::kServingRegionFieldNumber;
const int CachedNetworkParameters::kBandwidthEstimateBytesPerSecondFieldNumber;
const int CachedNetworkParameters::kMaxBandwidthEstimateBytesPerSecondFieldNumber;
const int CachedNetworkParameters::kMaxBandwidthTimestampSecondsFieldNumber;
const int CachedNetworkParameters::kMinRttMsFieldNumber;
const int CachedNetworkParameters::kPreviousConnectionStateFieldNumber;
const int CachedNetworkParameters::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CachedNetworkParameters::CachedNetworkParameters()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cached_5fnetwork_5fparameters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.CachedNetworkParameters)
}
CachedNetworkParameters::CachedNetworkParameters(const CachedNetworkParameters& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serving_region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serving_region()) {
    serving_region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serving_region_);
  }
  ::memcpy(&bandwidth_estimate_bytes_per_second_, &from.bandwidth_estimate_bytes_per_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&bandwidth_estimate_bytes_per_second_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:net.CachedNetworkParameters)
}

void CachedNetworkParameters::SharedCtor() {
  _cached_size_ = 0;
  serving_region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bandwidth_estimate_bytes_per_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&bandwidth_estimate_bytes_per_second_)) + sizeof(timestamp_));
}

CachedNetworkParameters::~CachedNetworkParameters() {
  // @@protoc_insertion_point(destructor:net.CachedNetworkParameters)
  SharedDtor();
}

void CachedNetworkParameters::SharedDtor() {
  serving_region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CachedNetworkParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CachedNetworkParameters& CachedNetworkParameters::default_instance() {
  protobuf_cached_5fnetwork_5fparameters_2eproto::InitDefaults();
  return *internal_default_instance();
}

CachedNetworkParameters* CachedNetworkParameters::New(::google::protobuf::Arena* arena) const {
  CachedNetworkParameters* n = new CachedNetworkParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CachedNetworkParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:net.CachedNetworkParameters)
  if (has_serving_region()) {
    GOOGLE_DCHECK(!serving_region_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*serving_region_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&bandwidth_estimate_bytes_per_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&bandwidth_estimate_bytes_per_second_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CachedNetworkParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net.CachedNetworkParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serving_region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serving_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bandwidth_estimate_bytes_per_second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bandwidth_estimate_bytes_per_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bandwidth_estimate_bytes_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_rtt_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_min_rtt_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_rtt_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 previous_connection_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_previous_connection_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &previous_connection_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_bandwidth_estimate_bytes_per_second = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_max_bandwidth_estimate_bytes_per_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bandwidth_estimate_bytes_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_bandwidth_timestamp_seconds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_max_bandwidth_timestamp_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_bandwidth_timestamp_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net.CachedNetworkParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net.CachedNetworkParameters)
  return false;
#undef DO_
}

void CachedNetworkParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net.CachedNetworkParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serving_region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serving_region(), output);
  }

  // optional int32 bandwidth_estimate_bytes_per_second = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bandwidth_estimate_bytes_per_second(), output);
  }

  // optional int32 min_rtt_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_rtt_ms(), output);
  }

  // optional int32 previous_connection_state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->previous_connection_state(), output);
  }

  // optional int32 max_bandwidth_estimate_bytes_per_second = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_bandwidth_estimate_bytes_per_second(), output);
  }

  // optional int64 max_bandwidth_timestamp_seconds = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->max_bandwidth_timestamp_seconds(), output);
  }

  // optional int64 timestamp = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->timestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net.CachedNetworkParameters)
}

size_t CachedNetworkParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.CachedNetworkParameters)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional string serving_region = 1;
    if (has_serving_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serving_region());
    }

    // optional int32 bandwidth_estimate_bytes_per_second = 2;
    if (has_bandwidth_estimate_bytes_per_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bandwidth_estimate_bytes_per_second());
    }

    // optional int32 min_rtt_ms = 3;
    if (has_min_rtt_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_rtt_ms());
    }

    // optional int32 previous_connection_state = 4;
    if (has_previous_connection_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->previous_connection_state());
    }

    // optional int32 max_bandwidth_estimate_bytes_per_second = 5;
    if (has_max_bandwidth_estimate_bytes_per_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_bandwidth_estimate_bytes_per_second());
    }

    // optional int64 max_bandwidth_timestamp_seconds = 6;
    if (has_max_bandwidth_timestamp_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_bandwidth_timestamp_seconds());
    }

    // optional int64 timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedNetworkParameters::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CachedNetworkParameters*>(&from));
}

void CachedNetworkParameters::MergeFrom(const CachedNetworkParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.CachedNetworkParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serving_region();
      serving_region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serving_region_);
    }
    if (cached_has_bits & 0x00000002u) {
      bandwidth_estimate_bytes_per_second_ = from.bandwidth_estimate_bytes_per_second_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_rtt_ms_ = from.min_rtt_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      previous_connection_state_ = from.previous_connection_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_bandwidth_estimate_bytes_per_second_ = from.max_bandwidth_estimate_bytes_per_second_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_bandwidth_timestamp_seconds_ = from.max_bandwidth_timestamp_seconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CachedNetworkParameters::CopyFrom(const CachedNetworkParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.CachedNetworkParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedNetworkParameters::IsInitialized() const {
  return true;
}

void CachedNetworkParameters::Swap(CachedNetworkParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CachedNetworkParameters::InternalSwap(CachedNetworkParameters* other) {
  serving_region_.Swap(&other->serving_region_);
  std::swap(bandwidth_estimate_bytes_per_second_, other->bandwidth_estimate_bytes_per_second_);
  std::swap(min_rtt_ms_, other->min_rtt_ms_);
  std::swap(previous_connection_state_, other->previous_connection_state_);
  std::swap(max_bandwidth_estimate_bytes_per_second_, other->max_bandwidth_estimate_bytes_per_second_);
  std::swap(max_bandwidth_timestamp_seconds_, other->max_bandwidth_timestamp_seconds_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CachedNetworkParameters::GetTypeName() const {
  return "net.CachedNetworkParameters";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CachedNetworkParameters

// optional string serving_region = 1;
bool CachedNetworkParameters::has_serving_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CachedNetworkParameters::set_has_serving_region() {
  _has_bits_[0] |= 0x00000001u;
}
void CachedNetworkParameters::clear_has_serving_region() {
  _has_bits_[0] &= ~0x00000001u;
}
void CachedNetworkParameters::clear_serving_region() {
  serving_region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serving_region();
}
const ::std::string& CachedNetworkParameters::serving_region() const {
  // @@protoc_insertion_point(field_get:net.CachedNetworkParameters.serving_region)
  return serving_region_.GetNoArena();
}
void CachedNetworkParameters::set_serving_region(const ::std::string& value) {
  set_has_serving_region();
  serving_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net.CachedNetworkParameters.serving_region)
}
#if LANG_CXX11
void CachedNetworkParameters::set_serving_region(::std::string&& value) {
  set_has_serving_region();
  serving_region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.CachedNetworkParameters.serving_region)
}
#endif
void CachedNetworkParameters::set_serving_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serving_region();
  serving_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.CachedNetworkParameters.serving_region)
}
void CachedNetworkParameters::set_serving_region(const char* value, size_t size) {
  set_has_serving_region();
  serving_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.CachedNetworkParameters.serving_region)
}
::std::string* CachedNetworkParameters::mutable_serving_region() {
  set_has_serving_region();
  // @@protoc_insertion_point(field_mutable:net.CachedNetworkParameters.serving_region)
  return serving_region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CachedNetworkParameters::release_serving_region() {
  // @@protoc_insertion_point(field_release:net.CachedNetworkParameters.serving_region)
  clear_has_serving_region();
  return serving_region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CachedNetworkParameters::set_allocated_serving_region(::std::string* serving_region) {
  if (serving_region != NULL) {
    set_has_serving_region();
  } else {
    clear_has_serving_region();
  }
  serving_region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serving_region);
  // @@protoc_insertion_point(field_set_allocated:net.CachedNetworkParameters.serving_region)
}

// optional int32 bandwidth_estimate_bytes_per_second = 2;
bool CachedNetworkParameters::has_bandwidth_estimate_bytes_per_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CachedNetworkParameters::set_has_bandwidth_estimate_bytes_per_second() {
  _has_bits_[0] |= 0x00000002u;
}
void CachedNetworkParameters::clear_has_bandwidth_estimate_bytes_per_second() {
  _has_bits_[0] &= ~0x00000002u;
}
void CachedNetworkParameters::clear_bandwidth_estimate_bytes_per_second() {
  bandwidth_estimate_bytes_per_second_ = 0;
  clear_has_bandwidth_estimate_bytes_per_second();
}
::google::protobuf::int32 CachedNetworkParameters::bandwidth_estimate_bytes_per_second() const {
  // @@protoc_insertion_point(field_get:net.CachedNetworkParameters.bandwidth_estimate_bytes_per_second)
  return bandwidth_estimate_bytes_per_second_;
}
void CachedNetworkParameters::set_bandwidth_estimate_bytes_per_second(::google::protobuf::int32 value) {
  set_has_bandwidth_estimate_bytes_per_second();
  bandwidth_estimate_bytes_per_second_ = value;
  // @@protoc_insertion_point(field_set:net.CachedNetworkParameters.bandwidth_estimate_bytes_per_second)
}

// optional int32 max_bandwidth_estimate_bytes_per_second = 5;
bool CachedNetworkParameters::has_max_bandwidth_estimate_bytes_per_second() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CachedNetworkParameters::set_has_max_bandwidth_estimate_bytes_per_second() {
  _has_bits_[0] |= 0x00000010u;
}
void CachedNetworkParameters::clear_has_max_bandwidth_estimate_bytes_per_second() {
  _has_bits_[0] &= ~0x00000010u;
}
void CachedNetworkParameters::clear_max_bandwidth_estimate_bytes_per_second() {
  max_bandwidth_estimate_bytes_per_second_ = 0;
  clear_has_max_bandwidth_estimate_bytes_per_second();
}
::google::protobuf::int32 CachedNetworkParameters::max_bandwidth_estimate_bytes_per_second() const {
  // @@protoc_insertion_point(field_get:net.CachedNetworkParameters.max_bandwidth_estimate_bytes_per_second)
  return max_bandwidth_estimate_bytes_per_second_;
}
void CachedNetworkParameters::set_max_bandwidth_estimate_bytes_per_second(::google::protobuf::int32 value) {
  set_has_max_bandwidth_estimate_bytes_per_second();
  max_bandwidth_estimate_bytes_per_second_ = value;
  // @@protoc_insertion_point(field_set:net.CachedNetworkParameters.max_bandwidth_estimate_bytes_per_second)
}

// optional int64 max_bandwidth_timestamp_seconds = 6;
bool CachedNetworkParameters::has_max_bandwidth_timestamp_seconds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CachedNetworkParameters::set_has_max_bandwidth_timestamp_seconds() {
  _has_bits_[0] |= 0x00000020u;
}
void CachedNetworkParameters::clear_has_max_bandwidth_timestamp_seconds() {
  _has_bits_[0] &= ~0x00000020u;
}
void CachedNetworkParameters::clear_max_bandwidth_timestamp_seconds() {
  max_bandwidth_timestamp_seconds_ = GOOGLE_LONGLONG(0);
  clear_has_max_bandwidth_timestamp_seconds();
}
::google::protobuf::int64 CachedNetworkParameters::max_bandwidth_timestamp_seconds() const {
  // @@protoc_insertion_point(field_get:net.CachedNetworkParameters.max_bandwidth_timestamp_seconds)
  return max_bandwidth_timestamp_seconds_;
}
void CachedNetworkParameters::set_max_bandwidth_timestamp_seconds(::google::protobuf::int64 value) {
  set_has_max_bandwidth_timestamp_seconds();
  max_bandwidth_timestamp_seconds_ = value;
  // @@protoc_insertion_point(field_set:net.CachedNetworkParameters.max_bandwidth_timestamp_seconds)
}

// optional int32 min_rtt_ms = 3;
bool CachedNetworkParameters::has_min_rtt_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CachedNetworkParameters::set_has_min_rtt_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void CachedNetworkParameters::clear_has_min_rtt_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void CachedNetworkParameters::clear_min_rtt_ms() {
  min_rtt_ms_ = 0;
  clear_has_min_rtt_ms();
}
::google::protobuf::int32 CachedNetworkParameters::min_rtt_ms() const {
  // @@protoc_insertion_point(field_get:net.CachedNetworkParameters.min_rtt_ms)
  return min_rtt_ms_;
}
void CachedNetworkParameters::set_min_rtt_ms(::google::protobuf::int32 value) {
  set_has_min_rtt_ms();
  min_rtt_ms_ = value;
  // @@protoc_insertion_point(field_set:net.CachedNetworkParameters.min_rtt_ms)
}

// optional int32 previous_connection_state = 4;
bool CachedNetworkParameters::has_previous_connection_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CachedNetworkParameters::set_has_previous_connection_state() {
  _has_bits_[0] |= 0x00000008u;
}
void CachedNetworkParameters::clear_has_previous_connection_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void CachedNetworkParameters::clear_previous_connection_state() {
  previous_connection_state_ = 0;
  clear_has_previous_connection_state();
}
::google::protobuf::int32 CachedNetworkParameters::previous_connection_state() const {
  // @@protoc_insertion_point(field_get:net.CachedNetworkParameters.previous_connection_state)
  return previous_connection_state_;
}
void CachedNetworkParameters::set_previous_connection_state(::google::protobuf::int32 value) {
  set_has_previous_connection_state();
  previous_connection_state_ = value;
  // @@protoc_insertion_point(field_set:net.CachedNetworkParameters.previous_connection_state)
}

// optional int64 timestamp = 7;
bool CachedNetworkParameters::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CachedNetworkParameters::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void CachedNetworkParameters::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void CachedNetworkParameters::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 CachedNetworkParameters::timestamp() const {
  // @@protoc_insertion_point(field_get:net.CachedNetworkParameters.timestamp)
  return timestamp_;
}
void CachedNetworkParameters::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:net.CachedNetworkParameters.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
